/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/appointmenttype": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get all appointment types for tenant. */
        post: operations["AppointmentType_SearchAppointmentTypes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get availability blocks given the search criteria. */
        post: operations["Availability_GetAvailabilityBlocks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/branch/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get branch details. */
        get: operations["Branch_GetBranchDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/branch/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Gets a paged result of branches based on search filters */
        post: operations["Branch_SearchBranches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/downloads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint downloads the requested document */
        get: operations["Downloads_FileDownload"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/patientreview/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns reviews, paged, based on selection criteria */
        post: operations["PatientReview_PostSearchReviews"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/product/skus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get all SKUs available for a given product code */
        post: operations["Product_GetSkus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/product/search/{ProductType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search product catalogue based on criteria */
        post: operations["Product_Search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/product/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get batch of product prices */
        post: operations["Product_GetBatchPrices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/product/retail-prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get batch of product retail prices at SKU level, where necessary */
        post: operations["Product_GetBatchRetailPrices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sku/stocklevels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get batch of SKU stock levels across all branches */
        post: operations["Sku_GetBatchStockLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sku/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get specific details for a SKU */
        post: operations["Sku_GetDetails"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sku/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get batches of SKU price */
        post: operations["Sku_GetBatchPrices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sku/updatestocklevelbysku": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates stock level for an individual SKU */
        put: operations["Sku_UpdateStockLevelBySku"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppointmentTypeResponse: {
            /**
             * Format: uuid
             * @description Appointment type identifier.
             */
            id?: string;
            /** @description Description for this appointment type. */
            description?: string | null;
            /** @description This is the EventType this AppointmentType is categorised as. */
            eventType?: string | null;
            /**
             * Format: int32
             * @description The standard length of this AppointmentType in minutes.
             */
            appointmentLength?: number;
            /** @description Is this AppointmentType available for online booking */
            isAvailableOnline?: boolean;
            /** @description The online name of this appointment Type */
            onlineName?: string | null;
            /** @description The online description of this appointmenT Type */
            onlineDescription?: string | null;
        };
        AppointmentTypesResponse: {
            /** @description Appointment Types. */
            appointmentTypes?: components["schemas"]["AppointmentTypeResponse"][] | null;
        };
        AvailabilityBlock: {
            /**
             * Format: uuid
             * @description The branch this appointment is available for
             */
            branchId?: string;
            /**
             * Format: uuid
             * @description The type of appointment that can be booked
             */
            appointmentTypeId?: string;
            /**
             * Format: uuid
             * @description The staff member this appointment is bookable for
             */
            staffId?: string;
            /**
             * Format: uuid
             * @description Gets or sets the room id for this appointment
             */
            roomId?: string;
            /** @description The times at which this appointment can be booked */
            timeSlots?: components["schemas"]["TimeRange"][] | null;
        };
        BatchSkuRetailPriceRequest: {
            priceRequests?: components["schemas"]["SkuRetailPriceRequest"][] | null;
        };
        BatchStockResponse: {
            /** @description Stock results */
            results?: components["schemas"]["StockResponse"][] | null;
        };
        BatchUpdateStockLevelBySkuRequest: {
            /** @description Notes */
            notes?: string | null;
            updateStockLevelBySkuRequests?: components["schemas"]["UpdateStockLevelBySkuRequest"][] | null;
        };
        BatchUpdateStockLevelBySkuResponse: {
            /** @description Successful responses by SKU ID */
            successes?: components["schemas"]["UpdateStockLevelBySkuResponse"][] | null;
            /** @description Failed responses by SKU ID */
            failures?: components["schemas"]["FailedUpdateStockLevelBySkuResponse"][] | null;
        };
        /** @enum {string} */
        BookInEnumeration: string;
        /** @enum {string} */
        BookOutEnumeration: string;
        Branch: {
            /**
             * Format: uuid
             * @description Gets or sets the branch identifier.
             */
            id?: string;
            /** @description Gets or sets the branch code */
            code?: string | null;
            /** @description Gets or sets the name of the branch. */
            name?: string | null;
            /** @description Gets or sets the telephone1 number. */
            telephone1?: string | null;
            /** @description Gets or sets the telephone2 number. */
            telephone2?: string | null;
            /** @description Gets or sets the email. */
            email?: string | null;
            /** @description Gets or sets the Online Friendly Branch Name. */
            onlineFriendlyBranchName?: string | null;
            /**
             * Format: uuid
             * @description Gets or sets the address identifier.
             */
            addressId?: string | null;
            /**
             * Format: decimal
             * @description Gets or sets the branch latitude location
             */
            latitude?: number | null;
            /**
             * Format: decimal
             * @description Gets or sets the branch logitude location
             */
            longitude?: number | null;
            /** @description Gets or sets a value indicating whether this Optix.PublicApi.Models.Branches.Responses.Branch is active. */
            active?: boolean | null;
        };
        BranchDetailsResponse: {
            /** @description Gets or sets the branch opening times */
            openingTimes?: {
                [key: string]: components["schemas"]["OpeningTimeResponse"] | undefined;
            } | null;
            /**
             * Format: uuid
             * @description Gets or sets the branch identifier.
             */
            id?: string;
            /** @description Gets or sets the branch code */
            code?: string | null;
            /** @description Gets or sets the name of the branch. */
            name?: string | null;
            /** @description Gets or sets the telephone1 number. */
            telephone1?: string | null;
            /** @description Gets or sets the telephone2 number. */
            telephone2?: string | null;
            /** @description Gets or sets the email. */
            email?: string | null;
            /** @description Gets or sets the Online Friendly Branch Name. */
            onlineFriendlyBranchName?: string | null;
            /**
             * Format: uuid
             * @description Gets or sets the address identifier.
             */
            addressId?: string | null;
            /**
             * Format: decimal
             * @description Gets or sets the branch latitude location
             */
            latitude?: number | null;
            /**
             * Format: decimal
             * @description Gets or sets the branch logitude location
             */
            longitude?: number | null;
            /** @description Gets or sets a value indicating whether this Optix.PublicApi.Models.Branches.Responses.Branch is active. */
            active?: boolean | null;
        };
        BranchIPagedResult: {
            /** Format: int64 */
            totalItems?: number;
            readonly items?: components["schemas"]["Branch"][] | null;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        BranchStock: {
            /** @description The branch code */
            branchCode?: string | null;
            /** @description The branch name */
            branchName?: string | null;
            /**
             * Format: int32
             * @description The non-consignment stock level
             */
            nonConsignmentStockLevel?: number;
            /**
             * Format: int32
             * @description The consignment stock level
             */
            consignmentStockLevel?: number;
            /**
             * Format: int32
             * @description The on-order stock level
             */
            onOrderStockLevel?: number;
        };
        /** @enum {string} */
        DiaryEventTypeEnumeration: string;
        FailedUpdateStockLevelBySkuResponse: {
            /**
             * Format: uuid
             * @description The SKU ID
             */
            skuId?: string;
            /**
             * Format: uuid
             * @description The Branch ID
             */
            branchId?: string;
            /** @description The error message */
            errorMessage?: string | null;
        };
        OpeningTimeResponse: {
            /**
             * Format: time-span
             * @description Gets the opening time
             * @example 00:00:00
             */
            openingTime?: string | null;
            /**
             * Format: time-span
             * @description Gets the closing time
             * @example 00:00:00
             */
            closingTime?: string | null;
            /** @description Gets if the premises is closed on this day */
            closed?: boolean | null;
            /**
             * Format: int32
             * @description Gets the day of the week
             */
            weekDayNumber?: number | null;
            /** @description Gets the day of week name e.g. 'Saturday' */
            day?: string | null;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            [key: string]: unknown;
        };
        ProductBatchPriceResponse: {
            /** @description A list of product prices */
            prices?: components["schemas"]["ProductPriceResponse"][] | null;
        };
        ProductPriceResponse: {
            /** @description The product code */
            code?: string | null;
            /**
             * Format: decimal
             * @description The effective price
             */
            effectivePrice?: number | null;
        };
        ProductSearchRequest: {
            /** @description True to filter only active appointments */
            active?: boolean;
            /**
             * Format: int32
             * @description Page number to return
             */
            pageNumber?: number;
            /**
             * Format: int32
             * @description Number of items per page
             */
            pageSize?: number;
            orderByDescending?: boolean;
            productName?: string | null;
            barcode?: string | null;
            code?: string | null;
            supplier?: string | null;
            manufacturer?: string | null;
            brand?: string | null;
            genericTag?: string | null;
            frameType?: string | null;
            material?: string | null;
            gender?: string | null;
            category?: string | null;
            /** Format: int32 */
            maxDiagonal?: number | null;
            /** Format: int32 */
            maxDiagonalMin?: number | null;
            /** Format: int32 */
            maxDiagonalMax?: number | null;
            /** Format: int32 */
            sideLength?: number | null;
            /** Format: int32 */
            sideLengthMin?: number | null;
            /** Format: int32 */
            sideLengthMax?: number | null;
            /** Format: int32 */
            eyeSize?: number | null;
            /** Format: int32 */
            eyeSizeMin?: number | null;
            /** Format: int32 */
            eyeSizeMax?: number | null;
            /** Format: int32 */
            dbl?: number | null;
            /** Format: int32 */
            dblMin?: number | null;
            /** Format: int32 */
            dblMax?: number | null;
            colour?: string | null;
            glazeable?: boolean | null;
            frameColour?: string | null;
            lensColour?: string | null;
            /**
             * Format: date-time
             * @description Inclusive start point for date filtering on Created Day
             */
            createdDayStart?: string | null;
            /**
             * Format: date-time
             * @description Inclusive end point for date filtering on Created Day
             */
            createdDayEnd?: string | null;
            /**
             * Format: date-time
             * @description Inclusive start point for date filtering on Modified Day
             */
            modifiedDayStart?: string | null;
            /**
             * Format: date-time
             * @description Inclusive end point for date filtering on Modified Day
             */
            modifiedDayEnd?: string | null;
        };
        /** @enum {string} */
        ProductType: string;
        QueryAvailabilityBlocksRequest: {
            /**
             * Format: date-time
             * @description Gets or sets the date range start
             */
            dateRangeStart?: string;
            /**
             * Format: date-time
             * @description Gets or sets the date range end
             */
            dateRangeEnd?: string;
            /** @description The rooms to return diary availabilities for */
            appointmentTypeIds?: string[] | null;
            /**
             * Format: uuid
             * @description The branches to return diary availabilities for
             */
            branchId?: string;
            /** @description Gets or sets if the availability query should only return online diary availability. */
            onlineAvailabilityOnly?: boolean | null;
        };
        QueryAvailabilityBlocksResponse: {
            /** @description Availability slots keyed by Date. */
            blocks?: {
                [key: string]: components["schemas"]["AvailabilityBlock"][] | undefined;
            } | null;
        };
        QueryBatchProductPriceRequest: {
            priceRequests?: string[] | null;
        };
        QueryBatchSkuPriceRequest: {
            skuIds?: string[] | null;
            codes?: string[] | null;
            barcodes?: string[] | null;
        };
        QueryBatchStockBySkuRequest: {
            /**
             * Format: date-time
             * @description <inheritdoc />
             */
            createdDayStart?: string | null;
            /**
             * Format: date-time
             * @description <inheritdoc />
             */
            createdDayEnd?: string | null;
            /**
             * Format: date-time
             * @description <inheritdoc />
             */
            modifiedDayStart?: string | null;
            /**
             * Format: date-time
             * @description <inheritdoc />
             */
            modifiedDayEnd?: string | null;
            skuIds?: string[] | null;
            codes?: string[] | null;
            barcodes?: string[] | null;
        };
        QueryProductDetailsBySkuRequest: {
            code?: string | null;
            barcode?: string | null;
            /** Format: uuid */
            skuId?: string | null;
        };
        QueryProductDetailsResponse: {
            /**
             * Format: uuid
             * @description Gets the product id
             */
            id?: string;
            /**
             * Format: uuid
             * @description Gets the product type id
             */
            productTypeId?: string;
            /** @description The product type ID */
            productType?: string | null;
            /** @description The product name */
            name?: string | null;
            /** @description The product code */
            code?: string | null;
            /** @description The product Bar Code */
            barcode?: string | null;
            /** @description The product suppliers */
            suppliers?: string[] | null;
            /** @description The product tags */
            tags?: string[] | null;
            /** @description The manufacturer ID */
            manufacturer?: string | null;
            /** @description The Brand ID */
            brand?: string | null;
            /** @description The frame type */
            frameType?: string | null;
            /** @description The frame colours */
            frameColours?: string[] | null;
            /** @description The lens colours */
            lensColours?: string[] | null;
            /** @description The product material */
            material?: string | null;
            /** @description The gender */
            gender?: string | null;
            /** @description Whether the product is glazeable or not. */
            glazeable?: boolean | null;
            /**
             * Format: date-time
             * @description The day that the product was created
             */
            createdDay?: string | null;
            /**
             * Format: date-time
             * @description The day that the product was updated
             */
            modifiedDay?: string | null;
        };
        QueryProductDetailsResponseIPagedResult: {
            /** Format: int64 */
            totalItems?: number;
            readonly items?: components["schemas"]["QueryProductDetailsResponse"][] | null;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        QueryProductSkusRequest: {
            /** @description The product code */
            productCode?: string | null;
            /**
             * Format: date-time
             * @description Inclusive start point for date filtering on Created Day
             */
            createdDayStart?: string | null;
            /**
             * Format: date-time
             * @description Inclusive end point for date filtering on Created Day
             */
            createdDayEnd?: string | null;
            /**
             * Format: date-time
             * @description Inclusive start point for date filtering on Modified Day
             */
            modifiedDayStart?: string | null;
            /**
             * Format: date-time
             * @description Inclusive end point for date filtering on Modified Day
             */
            modifiedDayEnd?: string | null;
        };
        QueryProductSkusResponse: {
            /** @description The list of Skus */
            skus?: components["schemas"]["SkuDetails"][] | null;
            /**
             * Format: date-time
             * @description The day that the product was created
             */
            createdDay?: string | null;
            /**
             * Format: date-time
             * @description The day that the product was updated
             */
            modifiedDay?: string | null;
        };
        /** @description An Optix review */
        ReviewResponse: {
            /**
             * Format: uuid
             * @description Gets or inits the review id
             */
            id?: string;
            /**
             * Format: uuid
             * @description Gets or inits the branch id this review is for
             */
            branchId?: string;
            /** @description Gets the branch name this review is for. */
            branchName?: string | null;
            /**
             * Format: uuid
             * @description Gets or inits the appointment type id this review is for
             */
            appointmentTypeId?: string;
            /** @description Gets the appointment type description this review is for. */
            appointmentTypeDescription?: string | null;
            /** @description Gets the appointment type online name this review is for. */
            appointmentTypeOnlineName?: string | null;
            /**
             * Format: date-time
             * @description Gets or inits the review date
             */
            reviewDate?: string;
            /** @description Gets or inits frist nanme of the person completing the review */
            firstName?: string | null;
            /** @description Gets or inits last nanme of the person completing the review */
            lastName?: string | null;
            /** @description Gets or inits the review answer */
            reviewAnswer?: string | null;
            /**
             * Format: int32
             * @description Gets or inits the review rating
             */
            rating?: number;
            /**
             * Format: int32
             * @description Gets or inits the primary NPS score
             */
            score?: number;
        };
        ReviewResponsePagedResult: {
            items?: components["schemas"]["ReviewResponse"][] | null;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalItems?: number;
        };
        ReviewSearchRequest: {
            reviewIds?: string[] | null;
            statuses?: components["schemas"]["ReviewStatuses"][] | null;
            pxFirstName?: string | null;
            pxLastName?: string | null;
            /** Format: int32 */
            pxPublicId?: number | null;
            pxIds?: string[] | null;
            /** Format: uuid */
            appointmentId?: string | null;
            /** Format: date-time */
            appointmentDateFrom?: string | null;
            /** Format: date-time */
            appointmentDateTo?: string | null;
            /**
             * Format: uuid
             * @deprecated
             */
            appointmentTypeId?: string | null;
            appointmentTypeIds?: string[] | null;
            /** Format: date-time */
            reviewDateFrom?: string | null;
            /** Format: date-time */
            reviewDateTo?: string | null;
            ratings?: number[] | null;
            scores?: number[] | null;
            branchIds?: string[] | null;
            /** Format: uuid */
            staffId?: string | null;
            /** Format: uuid */
            bookingStaffId?: string | null;
            /** Format: date-time */
            createdDate?: string | null;
            sortByColumn?: string | null;
            sortOrder?: string | null;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        /** @enum {string} */
        ReviewStatuses: "ToBeSent" | "PendingApproval" | "HeldInternally" | "OptixInvestigating" | "Approved" | "Cancelled" | "RemovedReSent" | "ReviewRequested" | "RequestExpired" | "OptixApproved" | "OptixRejected" | "NotSentTooRecent" | "PartiallyCompleted";
        SearchAppointmentTypesRequest: {
            /**
             * Format: uuid
             * @description Gets or Sets branch ID for what appointment types should be returned.
             */
            branchId?: string | null;
            /** @description Gets or sets if appointment types unassigned from any branch should be returned. */
            excludeGlobalAppointmentTypes?: boolean | null;
            /** @description Gets or sets if only appointment types that are available online should be returned. */
            onlyAvailableOnlineAppointmentTypes?: boolean | null;
            /** @description Gets or sets the event types to return. */
            includeEventTypes?: components["schemas"]["DiaryEventTypeEnumeration"][] | null;
        };
        SearchBranchesRequest: {
            /**
             * Format: int32
             * @description Page number to return
             */
            pageNumber?: number;
            /**
             * Format: int32
             * @description Number of items per page
             */
            pageSize?: number;
            /** @description Requested active status of branches */
            active?: boolean | null;
            /**
             * Format: uuid
             * @description Branding ID to filter by if needed: empty guid would reflect wanting to return the branches
             *     with group level branding (which is null in the db) as opposed to leaving this null if want
             *     all branches regardless of branding ID
             */
            brandingId?: string | null;
            /** @description Gets or sets a collection of branch ids to filter results by */
            branchIdFilter?: string[] | null;
        };
        SkuBatchPriceResponse: {
            /** @description The list of SKUs and their prices */
            prices?: components["schemas"]["SkuPriceResponse"][] | null;
        };
        SkuDetails: {
            /**
             * Format: uuid
             * @description The sku's unique identifier
             */
            skuId?: string;
            /** @description The sku's barcode */
            barcode?: string | null;
            /** @description The sku's code */
            code?: string | null;
            /** @description The sku's frame colour */
            frameColour?: string | null;
            /** @description The sku's eye size */
            eyeSize?: string | null;
            /** @description The sku's Dbl */
            dbl?: string | null;
            /** @description The sku's arm length */
            armLength?: string | null;
            /** @description The sku's max diagonal */
            maxDiagonal?: string | null;
            /** @description The sku's lens colour */
            lensColour?: string | null;
        };
        SkuPriceResponse: {
            /** @description The SKU's code */
            code?: string | null;
            /**
             * Format: decimal
             * @description The effective price
             */
            effectivePrice?: number | null;
        };
        SkuProductDetails: {
            /** @description The frame type */
            frameType?: string | null;
            /** @description The product type */
            productType?: string | null;
            /** @description The name */
            name?: string | null;
            /** @description The manufacturer */
            manufacturer?: string | null;
            /** @description The brand */
            brand?: string | null;
            /** @description The material */
            material?: string | null;
            /** @description The gender */
            gender?: string | null;
            /** @description The supplier code */
            supplierCode?: string | null;
            /**
             * Format: uuid
             * @description The sku's unique identifier
             */
            skuId?: string;
            /** @description The sku's barcode */
            barcode?: string | null;
            /** @description The sku's code */
            code?: string | null;
            /** @description The sku's frame colour */
            frameColour?: string | null;
            /** @description The sku's eye size */
            eyeSize?: string | null;
            /** @description The sku's Dbl */
            dbl?: string | null;
            /** @description The sku's arm length */
            armLength?: string | null;
            /** @description The sku's max diagonal */
            maxDiagonal?: string | null;
            /** @description The sku's lens colour */
            lensColour?: string | null;
        };
        SkuRetailPriceRequest: {
            /**
             * Format: uuid
             * @description The ID of the product in question as GUID
             */
            productId: string;
            /**
             * Format: uuid
             * @description The ID of the SKU when requesting a product type that has SKU management as a GUID
             */
            variantId?: string | null;
            /**
             * Format: uuid
             * @description The Id of the Branch as GUID
             */
            branchId: string;
            /**
             * Format: uuid
             * @description The Id of the product type (Sunglasses, Frames, CL, etc.) as GUID
             */
            productTypeId: string;
        };
        SkuRetailPriceResponse: {
            /**
             * Format: uuid
             * @description The unique GUID of the product.
             */
            productId: string;
            /**
             * Format: uuid
             * @description The SkuId / VariantId of the product, if applicable
             */
            variantId?: string | null;
            /**
             * Format: uuid
             * @description The unique Id of the branch that the product belongs to.
             */
            branchId: string;
            /**
             * Format: decimal
             * @description The cost of the product.
             */
            cost: number;
            /**
             * Format: decimal
             * @description The retail price of the product.
             */
            retailPrice: number;
        };
        StockResponse: {
            /** @description The stock's code */
            code?: string | null;
            /** @description List of branch related stock levels */
            branchStocks?: components["schemas"]["BranchStock"][] | null;
            /**
             * Format: date-time
             * @description Created Day of the sku
             */
            createdDay?: string | null;
            /**
             * Format: date-time
             * @description Last modified day of the sku
             */
            modifiedDay?: string | null;
            /** @description The supplier code of the sku. */
            supplierCode?: string | null;
        };
        TimeRange: {
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            /**
             * Format: time-span
             * @example 00:00:00
             */
            readonly duration?: string;
        };
        UpdateStockLevelBySkuRequest: {
            /** @description The book in reason. Only accepts Online_Return */
            bookInReason?: components["schemas"]["BookInEnumeration"] | null;
            /** @description The book out reason. Only accepts Online_Sale */
            bookOutReason?: components["schemas"]["BookOutEnumeration"] | null;
            /**
             * Format: int32
             * @description The quantity to increase / decrease by
             */
            quantity?: number;
            /**
             * Format: uuid
             * @description The relevant SKU ID
             */
            skuId?: string;
            /**
             * Format: uuid
             * @description The relevant Branch ID
             */
            branchId?: string;
        };
        UpdateStockLevelBySkuResponse: {
            /**
             * Format: uuid
             * @description The SKU ID
             */
            skuId?: string;
            /**
             * Format: uuid
             * @description The Branch ID
             */
            branchId?: string;
            /**
             * Format: int32
             * @description The original non consignment stock level
             */
            nonConsignmentStockLevelFrom?: number;
            /**
             * Format: int32
             * @description The new non consignment stock level
             */
            nonConsignmentStockLevelTo?: number;
            /**
             * Format: int32
             * @description The original consignment stock level
             */
            consignmentStockLevelFrom?: number;
            /**
             * Format: int32
             * @description The new consignment stock level
             */
            consignmentStockLevelTo?: number;
        };
        ValidationProblemDetails: {
            errors?: {
                [key: string]: string[] | undefined;
            } | null;
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppointmentType_SearchAppointmentTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["SearchAppointmentTypesRequest"];
                "application/json": components["schemas"]["SearchAppointmentTypesRequest"];
                "text/json": components["schemas"]["SearchAppointmentTypesRequest"];
                "application/*+json": components["schemas"]["SearchAppointmentTypesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentTypesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Availability_GetAvailabilityBlocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The query for availability */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["QueryAvailabilityBlocksRequest"];
                "application/json": components["schemas"]["QueryAvailabilityBlocksRequest"];
                "text/json": components["schemas"]["QueryAvailabilityBlocksRequest"];
                "application/*+json": components["schemas"]["QueryAvailabilityBlocksRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryAvailabilityBlocksResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Branch_GetBranchDetails: {
        parameters: {
            query?: {
                /** @description Whether or not to take group level overrides for opening times */
                useGroupOverrides?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of the branch to retrieve details for */
                branchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Branch_SearchBranches: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The search request model */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["SearchBranchesRequest"];
                "application/json": components["schemas"]["SearchBranchesRequest"];
                "text/json": components["schemas"]["SearchBranchesRequest"];
                "application/*+json": components["schemas"]["SearchBranchesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchIPagedResult"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Downloads_FileDownload: {
        parameters: {
            query?: {
                /** @description Auth key */
                key?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
        };
    };
    PatientReview_PostSearchReviews: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Query and paging parameters */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ReviewSearchRequest"];
                "application/json": components["schemas"]["ReviewSearchRequest"];
                "text/json": components["schemas"]["ReviewSearchRequest"];
                "application/*+json": components["schemas"]["ReviewSearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewResponsePagedResult"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Product_GetSkus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product code request */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["QueryProductSkusRequest"];
                "application/json": components["schemas"]["QueryProductSkusRequest"];
                "text/json": components["schemas"]["QueryProductSkusRequest"];
                "application/*+json": components["schemas"]["QueryProductSkusRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryProductSkusResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Product_Search: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Type of product ie "Frame" */
                ProductType: components["schemas"]["ProductType"];
            };
            cookie?: never;
        };
        /** @description Search criteria */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ProductSearchRequest"];
                "application/json": components["schemas"]["ProductSearchRequest"];
                "text/json": components["schemas"]["ProductSearchRequest"];
                "application/*+json": components["schemas"]["ProductSearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryProductDetailsResponseIPagedResult"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Product_GetBatchPrices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description A list of products to request prices for */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["QueryBatchProductPriceRequest"];
                "application/json": components["schemas"]["QueryBatchProductPriceRequest"];
                "text/json": components["schemas"]["QueryBatchProductPriceRequest"];
                "application/*+json": components["schemas"]["QueryBatchProductPriceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductBatchPriceResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Product_GetBatchRetailPrices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description A list of price requests for specific products (or product variants) including branch information */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["BatchSkuRetailPriceRequest"];
                "application/json": components["schemas"]["BatchSkuRetailPriceRequest"];
                "text/json": components["schemas"]["BatchSkuRetailPriceRequest"];
                "application/*+json": components["schemas"]["BatchSkuRetailPriceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkuRetailPriceResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    Sku_GetBatchStockLevel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SKU codes to lookup */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["QueryBatchStockBySkuRequest"];
                "application/json": components["schemas"]["QueryBatchStockBySkuRequest"];
                "text/json": components["schemas"]["QueryBatchStockBySkuRequest"];
                "application/*+json": components["schemas"]["QueryBatchStockBySkuRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchStockResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
        };
    };
    Sku_GetDetails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SKU code to lookup */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["QueryProductDetailsBySkuRequest"];
                "application/json": components["schemas"]["QueryProductDetailsBySkuRequest"];
                "text/json": components["schemas"]["QueryProductDetailsBySkuRequest"];
                "application/*+json": components["schemas"]["QueryProductDetailsBySkuRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkuProductDetails"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
        };
    };
    Sku_GetBatchPrices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SKU code to lookup */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["QueryBatchSkuPriceRequest"];
                "application/json": components["schemas"]["QueryBatchSkuPriceRequest"];
                "text/json": components["schemas"]["QueryBatchSkuPriceRequest"];
                "application/*+json": components["schemas"]["QueryBatchSkuPriceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkuBatchPriceResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
        };
    };
    Sku_UpdateStockLevelBySku: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["BatchUpdateStockLevelBySkuRequest"];
                "application/json": components["schemas"]["BatchUpdateStockLevelBySkuRequest"];
                "text/json": components["schemas"]["BatchUpdateStockLevelBySkuRequest"];
                "application/*+json": components["schemas"]["BatchUpdateStockLevelBySkuRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchUpdateStockLevelBySkuResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationProblemDetails"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
}
