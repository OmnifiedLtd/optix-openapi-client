import { newAuthenticatedClient } from './client'
import type { components } from '../generated' // generated by openapi-typescript
import { ApiResponse, fromClientResponse, toExn } from '../response'

export type BranchSearchRequest = components['schemas']['SearchBranchesRequest']
export type BranchSearchResponse = components['schemas']['BranchIPagedResult']

export async function branchesSearch(
  client: ReturnType<typeof newAuthenticatedClient>,
  input: BranchSearchRequest
): Promise<ApiResponse<BranchSearchResponse>> {
  const response = await client.POST('/v1/branch/search', {
    body: input,
  })
  return fromClientResponse(response)
}

export async function branchesSearchExn(
  client: ReturnType<typeof newAuthenticatedClient>,
  input: BranchSearchRequest
): Promise<BranchSearchResponse> {
  const response = await branchesSearch(client, input)
  return toExn(response)
}

export type BranchDetailsRequest = {
  branchId: string
}
export type BranchDetailsResponse = components['schemas']['BranchDetailsResponse']

export async function branchGetDetails(
  client: ReturnType<typeof newAuthenticatedClient>,
  input: BranchDetailsRequest
): Promise<ApiResponse<BranchDetailsResponse>> {
  const response = await client.GET('/v1/branch/{branchId}', {
    params: {
      path: {
        branchId: input.branchId,
      },
    },
  })
  return fromClientResponse(response)
}

export async function branchGetDetailsExn(
  client: ReturnType<typeof newAuthenticatedClient>,
  input: BranchDetailsRequest
): Promise<BranchDetailsResponse> {
  const response = await branchGetDetails(client, input)
  return toExn(response)
}




